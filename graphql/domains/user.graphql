type User {
    id: ID
    firstname: String
    lastname: String
    fullname: String
    photo: String
    birth_day: String # (required, not editable)
    phone: String
    email: String
    password: String
    role_id: String
    gender: String
    device: String
    addresses: [UserAddress] @hasMany
}

type UserAddress {
    id: ID
    address: String
    active: Boolean
}

type LoginResponse {
    token: String
    message: String
    user: User
}

type RegisterResponse {
    id: String
    name: String
    email: String
    phone: String
    token: String
}

type Favorites {
    id: ID
    product: Product
}

type UserFavorite {
    # favorites: [Favorites]
    product: Product
}

extend type Query {
    users(orderBy: _ @orderBy(columns: ["id"])): [User!]!
        @paginate
        @guard
        @can(ability: "getList", model: "Domain\\User\\Models\\User")
    user(id: ID @eq): User
        @find
        @guard
        @can(ability: "getUser", model: "Domain\\User\\Models\\User")
    me: User @auth
    myAddresses: [UserAddress] @guard @field(resolver: "GetMyAddressesQuery")
    myFavorites: [UserFavorite] @guard @field(resolver: "GetMyFavoritesQuery")
}

type Mutation {
    login(email: String, phone: String!, password: String!): LoginResponse
        @field(resolver: "LoginMutation")
    register(
        email: String
        phone: String!
        password: String!
        password_confirmation: String!
    ): RegisterResponse @field(resolver: "RegisterMutation")

    addAddress(address: String!): UserAddress
        @guard
        @field(resolver: "AddAddressMutation")

    activeAddress(id: ID!): String
        @guard
        @field(resolver: "ActiveAddressMutation")

    deleteAddress(id: ID!): String
        @guard
        @field(resolver: "DeleteAddressMutation")

    addFavorite(product_id: ID!): UserFavorite
        @guard
        @field(resolver: "AddFavoriteMutation")

    deleteFavorite(product_id: ID!): UserFavorite
        @guard
        @field(resolver: "DeleteFavoriteMutation")
}
