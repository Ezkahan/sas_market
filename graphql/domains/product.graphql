type Product {
    id: ID!
    title: JSON
    description: JSON
    code: String
    brand: Brand
    category: Category
    price: String
    discount_type: String
    discount_price: Int
    discount_amount: Int
    in_stock: Boolean
    status: Boolean
    stock: Int
    preview: Int
    is_favorite: Boolean
    image: String
    images: [ProductImage] @hasMany
    similarProducts: [Product]
}

type ProductImage {
    id: ID
    url: String
    product: Product
}

extend type Query {
    products(orderBy: _ @orderBy(columns: ["id"])): [Product!]! @paginate
    product(id: ID @eq): Product! @find
    searchProduct(name: String): [Product]
        @field(resolver: "SearchProductQuery")
    getProductsByType(type: String): [Product]
        @field(resolver: "getProductsByTypeQuery")
}

extend type Mutation {
    addProduct(
        title: JSON!
        description: JSON
        code: String!
        brand_id: ID!
        category_id: ID!
        price: String!
        discount_type: String
        discount_amount: Int
        images: [Upload!]!
    ): Product
        @guard
        @can(ability: "add", model: "Domain\\Product\\Models\\Product")
        @field(resolver: "AddProductMutation")

    updateProduct(id: ID!, title: JSON, description: JSON): Product
        @guard
        @can(ability: "update", model: "Domain\\Product\\Models\\Product")
        @field(resolver: "UpdateProductMutation")

    deleteProduct(id: ID): String
        @guard
        @can(ability: "delete", model: "Domain\\Product\\Models\\Product")
        @field(resolver: "DeleteProductMutation")
}
